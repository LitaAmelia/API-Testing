{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 7,
    "pending": 0,
    "failures": 3,
    "start": "2023-08-31T19:14:59.607Z",
    "end": "2023-08-31T19:15:03.727Z",
    "duration": 4120,
    "testsRegistered": 10,
    "passPercent": 70,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bb050494-8657-4fc0-ab65-0f156fbec668",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ceef1c17-2f5c-4fcd-a251-2eaf380e5e4d",
          "title": "Go REST POST request",
          "fullFile": "C:\\Users\\litaa\\Documents\\assessment\\API-Automation\\test\\delete.tests.js",
          "file": "\\test\\delete.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create data successfully",
              "fullTitle": "Go REST POST request Should create data successfully",
              "timedOut": false,
              "duration": 614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    name: 'Lita Amelia',\n    email: 'userbeneran1@example.com',\n    gender: 'female',\n    status: 'active'\n};\nconst response = await axios.post(`${config.apiUrl}/users`, newUser, {\n    headers: {\n        Authorization: `Bearer ${config.apiToken}`\n    }\n});\nexpect(response.status).to.equal(201);\nconst addedUser = response.data.id;\nconsole.log(addedUser);",
              "err": {},
              "uuid": "d932e5d7-2e5f-4d83-bb4a-6ba1aaac846e",
              "parentUUID": "ceef1c17-2f5c-4fcd-a251-2eaf380e5e4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should failed to create user",
              "fullTitle": "Go REST POST request Should failed to create user",
              "timedOut": false,
              "duration": 457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createUserBlankField = {\n    name: '',\n    email: '',\n    gender: '',\n    status: ''\n};\ntry {\n    const response = await axios.post(`${config.apiUrl}/users`, createUserBlankField, {\n        headers: {\n            Authorization: `Bearer ${config.apiToken}`\n        }\n    });\n    expect(response.status).not.to.equal(201)\n} catch (error) {\n    console.log(error.response.data);\n    expect(error.response).to.exist;\n    expect(error.response.status).to.equal(422);\n    \n    const errorArray = error.response.data;\n    for (const errorObject of errorArray) {\n        expect(errorObject).to.have.property('message');\n    }\n}",
              "err": {},
              "uuid": "ca72b1e8-c0d0-4484-ad67-435f7c846816",
              "parentUUID": "ceef1c17-2f5c-4fcd-a251-2eaf380e5e4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should failed to create user with invalid email",
              "fullTitle": "Go REST POST request Should failed to create user with invalid email",
              "timedOut": false,
              "duration": 793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createUserBlankField = {\n    name: 'Selaras',\n    email: 'invalid',\n    gender: 'male',\n    status: 'active'\n};\ntry {\n    const response = await axios.post(`${config.apiUrl}/users`, createUserBlankField, {\n        headers: {\n            Authorization: `Bearer ${config.apiToken}`\n        }\n    });\n    expect(response.status).not.to.equal(201)\n} catch (error) {\n    console.log(error.response.data);\n    expect(error.response).to.exist;\n    expect(error.response.status).to.equal(422);\n    \n    const errorArray = error.response.data;\n    for (const errorObject of errorArray) {\n        expect(errorObject).to.have.property('message');\n    }\n}",
              "err": {},
              "uuid": "a397afe6-c4bb-4ae9-9b44-b0613a64230c",
              "parentUUID": "ceef1c17-2f5c-4fcd-a251-2eaf380e5e4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fail to create data due to unauthorized access",
              "fullTitle": "Go REST POST request Should fail to create data due to unauthorized access",
              "timedOut": false,
              "duration": 334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newData = { \n    name: 'Selaras Kasih',\n    email: 'kasih@email.com',\n    gender: 'female',\n    status: 'active'\n};\ntry {\n    const response = await axios.post(`${config.apiUrl}/users`, newData, {\n        headers: {\n            Authorization: 'Bearer InvalidToken' \n        }\n    });\n    expect(response.status).to.equal(201); \n} catch (error) {\n    expect(error.response.status).to.equal(401);\n}",
              "err": {},
              "uuid": "409b8e2f-7a1c-4175-a6dd-4a0d28496554",
              "parentUUID": "ceef1c17-2f5c-4fcd-a251-2eaf380e5e4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d932e5d7-2e5f-4d83-bb4a-6ba1aaac846e",
            "ca72b1e8-c0d0-4484-ad67-435f7c846816",
            "a397afe6-c4bb-4ae9-9b44-b0613a64230c",
            "409b8e2f-7a1c-4175-a6dd-4a0d28496554"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2198,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e5cb990-16c8-4da5-96f2-f4fbfcfd003d",
          "title": "Go REST DELETE request",
          "fullFile": "C:\\Users\\litaa\\Documents\\assessment\\API-Automation\\test\\delete.tests.js",
          "file": "\\test\\delete.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete user",
              "fullTitle": "Go REST DELETE request Should delete user",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (!addedUser) {\n    throw new Error('User not created'); \n}\nconst response = await axios.delete(`${config.apiUrl}/users/${addedUser}`, {\n    headers: {\n        Authorization: `Bearer ${config.apiToken}`\n    }\n});\nexpect(response.status).to.equal(204);",
              "err": {
                "message": "Error: User not created",
                "estack": "Error: User not created\n    at Context.<anonymous> (test\\delete.tests.js:14:19)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "921dd464-ecbc-45e1-aeef-785c5dffa2d8",
              "parentUUID": "0e5cb990-16c8-4da5-96f2-f4fbfcfd003d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fail to delete user (User Not Found)",
              "fullTitle": "Go REST DELETE request Should fail to delete user (User Not Found)",
              "timedOut": false,
              "duration": 342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUserId = 'invalidUserId';\ntry {\n    const response = await axios.delete(`${config.apiUrl}/users/${invalidUserId}`, {\n        headers: {\n            Authorization: `Bearer ${config.apiToken}`\n        }\n    });\n    expect(response.status).not.to.equal(200);\n} catch (error) {\n    expect(error.response).to.exist;\n    expect(error.response.status).to.equal(404);\n    expect(error.response.data).to.have.property('message', 'Resource not found');\n}",
              "err": {},
              "uuid": "c393a921-094f-445e-a2a0-b0909eea4178",
              "parentUUID": "0e5cb990-16c8-4da5-96f2-f4fbfcfd003d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c393a921-094f-445e-a2a0-b0909eea4178"
          ],
          "failures": [
            "921dd464-ecbc-45e1-aeef-785c5dffa2d8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 343,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e272744-0b78-48d7-89dd-5e192e5bcbfb",
          "title": "Go REST GET request",
          "fullFile": "C:\\Users\\litaa\\Documents\\assessment\\API-Automation\\test\\get.tests.js",
          "file": "\\test\\get.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successfully retrieve the added data",
              "fullTitle": "Go REST GET request Should successfully retrieve the added data",
              "timedOut": false,
              "duration": 738,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${config.apiUrl}/users/${addedUser}`, {\n    headers: {\n        Authorization: `Bearer ${config.apiToken}`\n    }\n});\nexpect(response.status).to.equal(200);",
              "err": {
                "message": "AxiosError: Request failed with status code 404",
                "estack": "AxiosError: Request failed with status code 404\n    at settle (node_modules\\axios\\dist\\node\\axios.cjs:1913:12)\n    at BrotliDecompress.handleStreamEnd (node_modules\\axios\\dist\\node\\axios.cjs:2995:11)\n    at BrotliDecompress.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1358:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                "diff": null
              },
              "uuid": "88cb4aca-c988-4b42-a87b-8b6e4f889c45",
              "parentUUID": "5e272744-0b78-48d7-89dd-5e192e5bcbfb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fail to get detail users (User Not Found)",
              "fullTitle": "Go REST GET request Should fail to get detail users (User Not Found)",
              "timedOut": false,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUserId = 'invalidUserId';\ntry {\n    const response = await axios.get(`${config.apiUrl}/users/${invalidUserId}`, {\n        headers: {\n            Authorization: `Bearer ${config.apiToken}`\n        }\n    });\n    expect(response.status).not.to.equal(200);\n} catch (error) {\n    expect(error.response).to.exist;\n    expect(error.response.status).to.equal(404);\n    expect(error.response.data).to.have.property('message', 'Resource not found');\n}",
              "err": {},
              "uuid": "b932d081-392b-46af-b297-031b4170c86b",
              "parentUUID": "5e272744-0b78-48d7-89dd-5e192e5bcbfb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b932d081-392b-46af-b297-031b4170c86b"
          ],
          "failures": [
            "88cb4aca-c988-4b42-a87b-8b6e4f889c45"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84f89979-4773-4423-bb83-ac2b1cf30fbb",
          "title": "Go REST PUT request",
          "fullFile": "C:\\Users\\litaa\\Documents\\assessment\\API-Automation\\test\\put.tests.js",
          "file": "\\test\\put.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update user details",
              "fullTitle": "Go REST PUT request Should update user details",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (!addedUser) {\n    throw new Error('User not created');\n}\nconst updatedUserData = {\n    name: 'Lita Aja',\n    email: 'updated@example.com',\n};\nconst response = await axios.put(`${config.apiUrl}/users/${addedUser}`, updatedUserData, {\n    headers: {\n        Authorization: `Bearer ${config.apiToken}`\n    }\n});\nexpect(response.status).to.equal(200);\nconst responseData = response.data.data;\nfor (const property in updatedUserData) {\n    expect(responseData).to.have.property(property, updatedUserData[property]);\n}",
              "err": {
                "message": "Error: User not created",
                "estack": "Error: User not created\n    at Context.<anonymous> (test\\put.tests.js:14:19)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "40410a83-902d-470f-be86-f77d2d6cd350",
              "parentUUID": "84f89979-4773-4423-bb83-ac2b1cf30fbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fail to update user details (User Not Found)",
              "fullTitle": "Go REST PUT request Should fail to update user details (User Not Found)",
              "timedOut": false,
              "duration": 329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUserId = 'invalidUserId';\nconst updatedUserData = {\n    name: 'Lita Aja',\n    email: 'updated@example.com',\n};\ntry {\n    const response = await axios.put(`${config.apiUrl}/users/${invalidUserId}`, updatedUserData, {\n        headers: {\n            Authorization: `Bearer ${config.apiToken}`\n        }\n    });\n    expect(response.status).not.to.equal(200);\n} catch (error) {\n    expect(error.response).to.exist;\n    expect(error.response.status).to.equal(404);\n    expect(error.response.data).to.have.property('message', 'Resource not found');\n}",
              "err": {},
              "uuid": "b1083abd-5aaf-4a69-b092-cebac5df9a3b",
              "parentUUID": "84f89979-4773-4423-bb83-ac2b1cf30fbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1083abd-5aaf-4a69-b092-cebac5df9a3b"
          ],
          "failures": [
            "40410a83-902d-470f-be86-f77d2d6cd350"
          ],
          "pending": [],
          "skipped": [],
          "duration": 329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}